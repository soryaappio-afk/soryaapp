// Minimal MVP schema with NextAuth & initial domain models
// Extend later per README & processLis

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(cuid())
  email               String            @unique
  emailVerified       DateTime?
  name                String?
  image               String?
  // Made optional so OAuth (GitHub/Google) accounts without local credentials can be created.
  passwordHash        String?
  credits             Int               @default(1000)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  accounts            Account[]
  sessions            Session[]
  projects            Project[]
  messages            ChatMessage[]
  githubToken         String?           @db.Text
  vercelToken         String?           @db.Text
  routines            Routine[]
  encryptedSecrets    EncryptedSecret[]
  creditLedgerEntries CreditLedger[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             String            @id @default(cuid())
  user           User              @relation(fields: [userId], references: [id])
  userId         String
  name           String
  status         String            @default("NEW")
  deploymentUrl  String?
  vercelProjectId   String? // real Vercel project id (when created)
  vercelProjectSlug String? // cached slug for naming consistency
  type           String? // classification later
  typeConfidence Float?
  typeManualOverride Boolean @default(false)
  lastSnapshotId String?
  repoFullName   String? // github owner/name when published
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  messages       ChatMessage[]
  snapshots      ProjectSnapshot[]
  deployments    Deployment[]
  routines       Routine[]
  todos          ProjectTodo[]
  conversationState ProjectConversationState?
}

model ChatMessage {
  id                String    @id @default(cuid())
  user              User      @relation(fields: [userId], references: [id])
  userId            String
  project           Project?  @relation(fields: [projectId], references: [id])
  projectId         String?
  role              String
  content           String    @db.Text
  createdAt         DateTime  @default(now())
  triggeredRoutines Routine[]
}

model ProjectSnapshot {
  id        String   @id @default(cuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  summary   String?
  previewStrategy String?
  planMeta  Json?
  files     Json
  createdAt DateTime @default(now())
}

model Deployment {
  id                 String   @id @default(cuid())
  project            Project  @relation(fields: [projectId], references: [id])
  projectId          String
  vercelDeploymentId String?
  url                String?
  state              String   @default("PENDING") // PENDING | BUILDING | ERROR | READY
  attempt            Int      @default(1)
  buildLogExcerpt    String?  @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Routine {
  id               String       @id @default(cuid())
  project          Project?     @relation(fields: [projectId], references: [id])
  projectId        String?
  user             User         @relation(fields: [userId], references: [id])
  userId           String
  triggerMessage   ChatMessage? @relation(fields: [triggerMessageId], references: [id])
  triggerMessageId String?
  kind             String       @default("GENERATION")
  status           String       @default("RUNNING") // RUNNING | SUCCESS | ERROR
  steps            Json         @default("[]")
  createdFiles     Json?        // array of file paths created in this routine
  updatedFiles     Json?        // array of file paths updated in this routine
  deletedFiles     Json?        // array of file paths deleted in this routine
  startedAt        DateTime     @default(now())
  finishedAt       DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model EncryptedSecret {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  provider   String
  label      String?
  ciphertext String   @db.Text
  createdAt  DateTime @default(now())
}

model CreditLedger {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  delta     Int
  reason    String
  meta      Json?
  createdAt DateTime @default(now())
}

model ProjectConversationState {
  projectId             String   @id
  project               Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  summary               String?  @db.Text
  summaryTokens         Int      @default(0)
  totalMessages         Int      @default(0)
  lastSummarizedMessageId String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model ProjectTodo {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  text        String   @db.Text
  status      String   @default("OPEN") // OPEN | DONE
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?
}
